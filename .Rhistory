ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", x = "Expected Cost, $", fill = "Verified Reliability of Digital Twin", lty = "")+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
#| echo: false
EVoPI <- (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost - mean(preposterior_df$Cost)
MVoPI <- (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost - min(preposterior_df$Cost)
EVoPI
MVoPI
#| echo: false
input_df <- tribble(
~Input, ~Value, ~Units,
"probability of defect", 0.1, NA,
"cost of investigation", 1e5, "$",
"cost of shut-down", 2e5, "$",
"cost of component failure", 5e5, "$",
"probability of failure of defective component", 1/2, NA,
"probability of failure of undamaged component", 1e-4, NA,
"probability of failure during shut-down", 1e-6, NA
)
input_df |> knitr::kable()
library(RHugin)
maint_dec <- hugin.domain()
create_influence_diagram <- function(id = maint_dec){
add.node(domain = id, name = "maintenance_plan", category = "decision", states = c("shut_down", "investigate", "no_action"))
add.node(domain = id, name = "verification_plan", category = "decision", states = c("verify_dt", "no_action"))
add.node(domain = id, name = "asset_condition", category = "chance", states = c("failure", "survival"))
add.node(domain = id, name = "dt_data", category = "chance", states = c("defect_detected", "no_detection"))
add.node(domain = id, name = "failure_risk", category = "utility")
add.node(domain = id, name = "maintenance_cost", category = "utility")
add.edge(domain = id, child = "failure_risk", parent = "asset_condition")
add.edge(domain = id, child = "asset_condition", parent = "dt_data")
add.edge(domain = id, child = "asset_condition", parent = "maintenance_plan")
add.edge(domain = id, child = "maintenance_cost", parent = "maintenance_plan")
add.edge(domain = id, child = "asset_condition", parent = "verification_plan")
add.edge(domain = id, child = "dt_data", parent = "verification_plan")
}
create_influence_diagram()
get.table(domain = maint_dec, node = 'dt_data')
library(lhs)
pr_defect <- (input_df |> filter(Input == "probability of defect"))$Value
maint_cost <- (input_df |> filter(Input == "cost of investigation"))$Value
fail_cost <- (input_df |> filter(Input == "cost of component failure"))$Value
shut_down_cost <- (input_df |> filter(Input == "cost of shut-down"))$Value
baseline_pof <- (input_df |> filter(Input == "probability of failure of undamaged component"))$Value
defect_pof <- (input_df |> filter(Input == "probability of failure of defective component"))$Value
shut_down_pof <- (input_df |> filter(Input == "probability of failure during shut-down"))$Value
n_samples <- 1e3; set.seed(seed = 1234)
dt_reliability <- qbeta(p = lhs::randomLHS(n = n_samples, k = 1),
shape1 = alpha_prior_example,
shape2 = beta_prior_example) |>
sort()
verif_det_pof <- defect_pof * dt_reliability + baseline_pof * (1 - dt_reliability)
verif_no_det_pof <- baseline_pof * dt_reliability + defect_pof * (1 - dt_reliability)
verif_pr_det <- dt_reliability * pr_defect + (1 - dt_reliability) * (1 - pr_defect)
prior_dt_reliability <- mean(dt_reliability)
det_pof <- defect_pof * prior_dt_reliability + baseline_pof * (1 - prior_dt_reliability)
no_det_pof <- baseline_pof * prior_dt_reliability + defect_pof * (1 - prior_dt_reliability)
pr_det <- prior_dt_reliability * pr_defect + (1 - prior_dt_reliability) * (1 - pr_defect)
dt_table <- get.table(domain = maint_dec, node = "dt_data") |>
mutate(Freq = c(verif_pr_det[1], 1 - verif_pr_det[1], pr_det, 1- pr_det))
condition_df <- get.table(domain = maint_dec, node = "asset_condition") |>
mutate(Freq = case_when(
asset_condition == "failure" & maintenance_plan == "shut_down" ~ shut_down_pof,
asset_condition == "survival" & maintenance_plan == "shut_down" ~ 1 - shut_down_pof,
asset_condition == "failure" & maintenance_plan == "investigate" ~ baseline_pof,
asset_condition == "survival" & maintenance_plan == "investigate" ~ 1 - baseline_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "defect_detected" ~ det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "defect_detected" ~ 1 - det_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "no_detection" ~ no_det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "no_detection" ~ 1 - no_det_pof,
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ verif_det_pof[1],
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ 1 - verif_det_pof[1],
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ verif_no_det_pof[1],
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ 1 - verif_no_det_pof[1],
T ~ 0))
maint_df <- get.table(domain = maint_dec, node = "maintenance_cost") |>
mutate(Utility = c(shut_down_cost, maint_cost, 0))
fail_df <- get.table(domain = maint_dec, node = "failure_risk") |>
mutate(Utility = c(fail_cost, 0))
set.table(domain = maint_dec, node = "dt_data", data = dt_table)
set.table(domain = maint_dec, node = "asset_condition", data = condition_df)
set.table(domain = maint_dec, node = "maintenance_cost", data = maint_df)
set.table(domain = maint_dec, node = "failure_risk", data = fail_df)
compile(maint_dec)
set.finding(domain = maint_dec, node = "verification_plan", finding = "no_action")
propagate(maint_dec)
#| echo: false
usd <- scales::dollar_format(prefix = "$")
prior_utilities <- get.utility(domain = maint_dec, node = "maintenance_plan") |>
as_tibble() |>
mutate(Action = get.table(domain = maint_dec, node = "maintenance_plan")$maintenance_plan) |>
rename("Cost" = value)
prior_utilities |> mutate(Cost = usd(Cost)) |> knitr::kable()
#| echo: false
find_preposterior_utilities <- function(digital_twin_reliability){
maint_dec <- hugin.domain()
create_influence_diagram(id = maint_dec)
verif_pr_det <- digital_twin_reliability * pr_defect + (1 - digital_twin_reliability) * (1 - pr_defect)
verif_det_pof <- defect_pof * digital_twin_reliability + baseline_pof * (1 - digital_twin_reliability)
verif_no_det_pof <- baseline_pof * digital_twin_reliability + defect_pof * (1 - digital_twin_reliability)
dt_table <- get.table(domain = maint_dec, node = "dt_data") |>
mutate(Freq = c(verif_pr_det, 1 - verif_pr_det, pr_det, 1- pr_det))
condition_df <- get.table(domain = maint_dec, node = "asset_condition") |>
mutate(Freq = case_when(
asset_condition == "failure" & maintenance_plan == "shut_down" ~ shut_down_pof,
asset_condition == "survival" & maintenance_plan == "shut_down" ~ 1 - shut_down_pof,
asset_condition == "failure" & maintenance_plan == "investigate" ~ baseline_pof,
asset_condition == "survival" & maintenance_plan == "investigate" ~ 1 - baseline_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "defect_detected" ~ det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "defect_detected" ~ 1 - det_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "no_detection" ~ no_det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "no_detection" ~ 1 - no_det_pof,
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ verif_det_pof,
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ 1 - verif_det_pof,
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ verif_no_det_pof,
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ 1 - verif_no_det_pof,
T ~ 0))
maint_df <- get.table(domain = maint_dec, node = "maintenance_cost") |>
mutate(Utility = c(shut_down_cost, maint_cost, 0))
fail_df <- get.table(domain = maint_dec, node = "failure_risk") |>
mutate(Utility = c(fail_cost, 0))
set.table(domain = maint_dec, node = "dt_data", data = dt_table)
set.table(domain = maint_dec, node = "asset_condition", data = condition_df)
set.table(domain = maint_dec, node = "maintenance_cost", data = maint_df)
set.table(domain = maint_dec, node = "failure_risk", data = fail_df)
compile(maint_dec)
set.finding(domain = maint_dec, node = "verification_plan", finding = "verify_dt")
propagate(maint_dec)
prior_utilities <- get.utility(domain = maint_dec, node = "maintenance_plan") |>
as_tibble() |>
mutate(Action = get.table(domain = maint_dec, node = "maintenance_plan")$maintenance_plan,
value = usd(value)) |>
rename("Cost" = value)
utility_df <- get.utility(domain = maint_dec, node = "maintenance_plan") |>
as_tibble() |>
mutate(Action = get.table(domain = maint_dec, node = "maintenance_plan")$maintenance_plan) |>
rename("Cost" = value) |>
mutate(dt_reliability = digital_twin_reliability)
return(utility_df)
}
preposterior_df <- data.frame()
for(i in seq(from = 1, to = n_samples, by = 1)){
utility_df <- find_preposterior_utilities(digital_twin_reliability = dt_reliability[i])
preposterior_df <- bind_rows(preposterior_df,
utility_df |> filter(Cost == min(utility_df$Cost)))
}
# echo: false
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", x = "Expected Cost, $", fill = "Verified Reliability of Digital Twin", lty = "")+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
#| echo: false
EVoPI <- (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost - mean(preposterior_df$Cost)
MVoPI <- (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost - min(preposterior_df$Cost)
EVoPI
MVoPI
# echo: false
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", x = "Expected Cost, $", fill = "Verified Reliability of Digital Twin", lty = "")+
xlims(0, 1.05e5)+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
# echo: false
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.05e5))+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
alpha_prior_example <- 6; beta_prior_example <- 2
posterior_plot(n_trials = 5, n_successes = 5, alpha_prior = alpha_prior_example, beta_prior = beta_prior_example)
library(RHugin)
maint_dec <- hugin.domain()
create_influence_diagram <- function(id = maint_dec){
add.node(domain = id, name = "maintenance_plan", category = "decision", states = c("shut_down", "investigate", "no_action"))
add.node(domain = id, name = "verification_plan", category = "decision", states = c("verify_dt", "no_action"))
add.node(domain = id, name = "asset_condition", category = "chance", states = c("failure", "survival"))
add.node(domain = id, name = "dt_data", category = "chance", states = c("defect_detected", "no_detection"))
add.node(domain = id, name = "failure_risk", category = "utility")
add.node(domain = id, name = "maintenance_cost", category = "utility")
add.edge(domain = id, child = "failure_risk", parent = "asset_condition")
add.edge(domain = id, child = "asset_condition", parent = "dt_data")
add.edge(domain = id, child = "asset_condition", parent = "maintenance_plan")
add.edge(domain = id, child = "maintenance_cost", parent = "maintenance_plan")
add.edge(domain = id, child = "asset_condition", parent = "verification_plan")
add.edge(domain = id, child = "dt_data", parent = "verification_plan")
}
create_influence_diagram()
#| echo: false
input_df <- tribble(
~Input, ~Value, ~Units,
"probability of defect", 0.15, NA,
"cost of investigation", 1e5, "$",
"cost of shut-down", 2e5, "$",
"cost of component failure", 5e5, "$",
"probability of failure of defective component", 1/2, NA,
"probability of failure of undamaged component", 1e-4, NA,
"probability of failure during shut-down", 1e-6, NA
)
input_df |> knitr::kable()
library(lhs)
pr_defect <- (input_df |> filter(Input == "probability of defect"))$Value
maint_cost <- (input_df |> filter(Input == "cost of investigation"))$Value
fail_cost <- (input_df |> filter(Input == "cost of component failure"))$Value
shut_down_cost <- (input_df |> filter(Input == "cost of shut-down"))$Value
baseline_pof <- (input_df |> filter(Input == "probability of failure of undamaged component"))$Value
defect_pof <- (input_df |> filter(Input == "probability of failure of defective component"))$Value
shut_down_pof <- (input_df |> filter(Input == "probability of failure during shut-down"))$Value
n_samples <- 1e3; set.seed(seed = 1234)
dt_reliability <- qbeta(p = lhs::randomLHS(n = n_samples, k = 1),
shape1 = alpha_prior_example,
shape2 = beta_prior_example) |>
sort()
verif_det_pof <- defect_pof * dt_reliability + baseline_pof * (1 - dt_reliability)
verif_no_det_pof <- baseline_pof * dt_reliability + defect_pof * (1 - dt_reliability)
verif_pr_det <- dt_reliability * pr_defect + (1 - dt_reliability) * (1 - pr_defect)
prior_dt_reliability <- mean(dt_reliability)
det_pof <- defect_pof * prior_dt_reliability + baseline_pof * (1 - prior_dt_reliability)
no_det_pof <- baseline_pof * prior_dt_reliability + defect_pof * (1 - prior_dt_reliability)
pr_det <- prior_dt_reliability * pr_defect + (1 - prior_dt_reliability) * (1 - pr_defect)
library(lhs)
pr_defect <- (input_df |> filter(Input == "probability of defect"))$Value
maint_cost <- (input_df |> filter(Input == "cost of investigation"))$Value
fail_cost <- (input_df |> filter(Input == "cost of component failure"))$Value
shut_down_cost <- (input_df |> filter(Input == "cost of shut-down"))$Value
baseline_pof <- (input_df |> filter(Input == "probability of failure of undamaged component"))$Value
defect_pof <- (input_df |> filter(Input == "probability of failure of defective component"))$Value
shut_down_pof <- (input_df |> filter(Input == "probability of failure during shut-down"))$Value
n_samples <- 1e3; set.seed(seed = 1234)
dt_reliability <- qbeta(p = lhs::randomLHS(n = n_samples, k = 1),
shape1 = alpha_prior_example,
shape2 = beta_prior_example) |>
sort()
verif_det_pof <- defect_pof * dt_reliability + baseline_pof * (1 - dt_reliability)
verif_no_det_pof <- baseline_pof * dt_reliability + defect_pof * (1 - dt_reliability)
verif_pr_det <- dt_reliability * pr_defect + (1 - dt_reliability) * (1 - pr_defect)
prior_dt_reliability <- mean(dt_reliability)
det_pof <- defect_pof * prior_dt_reliability + baseline_pof * (1 - prior_dt_reliability)
no_det_pof <- baseline_pof * prior_dt_reliability + defect_pof * (1 - prior_dt_reliability)
pr_det <- prior_dt_reliability * pr_defect + (1 - prior_dt_reliability) * (1 - pr_defect)
dt_table <- get.table(domain = maint_dec, node = "dt_data") |>
mutate(Freq = c(verif_pr_det[1], 1 - verif_pr_det[1], pr_det, 1- pr_det))
condition_df <- get.table(domain = maint_dec, node = "asset_condition") |>
mutate(Freq = case_when(
asset_condition == "failure" & maintenance_plan == "shut_down" ~ shut_down_pof,
asset_condition == "survival" & maintenance_plan == "shut_down" ~ 1 - shut_down_pof,
asset_condition == "failure" & maintenance_plan == "investigate" ~ baseline_pof,
asset_condition == "survival" & maintenance_plan == "investigate" ~ 1 - baseline_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "defect_detected" ~ det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "defect_detected" ~ 1 - det_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "no_detection" ~ no_det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "no_detection" ~ 1 - no_det_pof,
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ verif_det_pof[1],
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ 1 - verif_det_pof[1],
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ verif_no_det_pof[1],
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ 1 - verif_no_det_pof[1],
T ~ 0))
maint_df <- get.table(domain = maint_dec, node = "maintenance_cost") |>
mutate(Utility = c(shut_down_cost, maint_cost, 0))
fail_df <- get.table(domain = maint_dec, node = "failure_risk") |>
mutate(Utility = c(fail_cost, 0))
set.table(domain = maint_dec, node = "dt_data", data = dt_table)
set.table(domain = maint_dec, node = "asset_condition", data = condition_df)
set.table(domain = maint_dec, node = "maintenance_cost", data = maint_df)
set.table(domain = maint_dec, node = "failure_risk", data = fail_df)
compile(maint_dec)
set.finding(domain = maint_dec, node = "verification_plan", finding = "no_action")
propagate(maint_dec)
#| echo: false
usd <- scales::dollar_format(prefix = "$")
prior_utilities <- get.utility(domain = maint_dec, node = "maintenance_plan") |>
as_tibble() |>
mutate(Action = get.table(domain = maint_dec, node = "maintenance_plan")$maintenance_plan) |>
rename("Cost" = value)
prior_utilities |> mutate(Cost = usd(Cost)) |> knitr::kable()
#| echo: false
find_preposterior_utilities <- function(digital_twin_reliability){
maint_dec <- hugin.domain()
create_influence_diagram(id = maint_dec)
verif_pr_det <- digital_twin_reliability * pr_defect + (1 - digital_twin_reliability) * (1 - pr_defect)
verif_det_pof <- defect_pof * digital_twin_reliability + baseline_pof * (1 - digital_twin_reliability)
verif_no_det_pof <- baseline_pof * digital_twin_reliability + defect_pof * (1 - digital_twin_reliability)
dt_table <- get.table(domain = maint_dec, node = "dt_data") |>
mutate(Freq = c(verif_pr_det, 1 - verif_pr_det, pr_det, 1- pr_det))
condition_df <- get.table(domain = maint_dec, node = "asset_condition") |>
mutate(Freq = case_when(
asset_condition == "failure" & maintenance_plan == "shut_down" ~ shut_down_pof,
asset_condition == "survival" & maintenance_plan == "shut_down" ~ 1 - shut_down_pof,
asset_condition == "failure" & maintenance_plan == "investigate" ~ baseline_pof,
asset_condition == "survival" & maintenance_plan == "investigate" ~ 1 - baseline_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "defect_detected" ~ det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "defect_detected" ~ 1 - det_pof,
asset_condition == "failure" & verification_plan == "no_action" & dt_data == "no_detection" ~ no_det_pof,
asset_condition == "survival" & verification_plan == "no_action" & dt_data == "no_detection" ~ 1 - no_det_pof,
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ verif_det_pof,
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "defect_detected" ~ 1 - verif_det_pof,
asset_condition == "failure" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ verif_no_det_pof,
asset_condition == "survival" & verification_plan == "verify_dt" & dt_data == "no_detection" ~ 1 - verif_no_det_pof,
T ~ 0))
maint_df <- get.table(domain = maint_dec, node = "maintenance_cost") |>
mutate(Utility = c(shut_down_cost, maint_cost, 0))
fail_df <- get.table(domain = maint_dec, node = "failure_risk") |>
mutate(Utility = c(fail_cost, 0))
set.table(domain = maint_dec, node = "dt_data", data = dt_table)
set.table(domain = maint_dec, node = "asset_condition", data = condition_df)
set.table(domain = maint_dec, node = "maintenance_cost", data = maint_df)
set.table(domain = maint_dec, node = "failure_risk", data = fail_df)
compile(maint_dec)
set.finding(domain = maint_dec, node = "verification_plan", finding = "verify_dt")
propagate(maint_dec)
prior_utilities <- get.utility(domain = maint_dec, node = "maintenance_plan") |>
as_tibble() |>
mutate(Action = get.table(domain = maint_dec, node = "maintenance_plan")$maintenance_plan,
value = usd(value)) |>
rename("Cost" = value)
utility_df <- get.utility(domain = maint_dec, node = "maintenance_plan") |>
as_tibble() |>
mutate(Action = get.table(domain = maint_dec, node = "maintenance_plan")$maintenance_plan) |>
rename("Cost" = value) |>
mutate(dt_reliability = digital_twin_reliability)
return(utility_df)
}
preposterior_df <- data.frame()
for(i in seq(from = 1, to = n_samples, by = 1)){
utility_df <- find_preposterior_utilities(digital_twin_reliability = dt_reliability[i])
preposterior_df <- bind_rows(preposterior_df,
utility_df |> filter(Cost == min(utility_df$Cost)))
}
# echo: false
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.05e5))+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
#| echo: false
EVoPI <- (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost - mean(preposterior_df$Cost)
MVoPI <- (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost - min(preposterior_df$Cost)
EVoPI
MVoPI
# echo: false
#| label: fig-voi_results
#| tbl-cap: "Expected Cost and Optimal Action Associated with each Simulation From a Prospective Digital Twin Verification Study"
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.05e5))+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
# echo: false
#| label: fig-voi_results
#| tbl-cap: "Expected Cost and Optimal Action Associated with each Simulation From a Prospective Digital Twin Verification Study"
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.09e5))+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
#| echo: false
#| label: fig-voi_results
#| tbl-cap: "Expected Cost and Optimal Action Associated with each Simulation From a Prospective Digital Twin Verification Study"
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.04e5))+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
#| echo: false
#| label: fig-voi_results
#| tbl-cap: "Expected Cost and Optimal Action Associated with each Simulation From a Prospective Digital Twin Verification Study"
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.04e5))+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 12, barheight = 1/2, order = 3))
#| echo: false
#| label: fig-voi_results
#| tbl-cap: "Expected Cost and Optimal Action Associated with each Simulation From a Prospective Digital Twin Verification Study"
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.04e5))+
ggthemes::theme_base(base_size = 14, base_family = 'Atkinson Hyperlegible')+
theme(legend.position = 'top', legend.title = element_text(size = 12), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 13, barheight = 1/2, order = 3))
#| echo: false
#| label: fig-voi_results
#| fig-cap: "Expected Cost and Optimal Action Associated with each Simulation From a Prospective Digital Twin Verification Study"
ggplot(data = bind_rows(preposterior_df, tibble(Cost = NA, Action = "shut-down", dt_reliability = NA)) |>
mutate(Action = factor(x = Action, levels = c("no_action", "investigate", "shut-down"))),
mapping = aes(x = Cost, y = Action))+
geom_jitter(shape = 21, alpha = 1/2, height = 1/3, mapping = aes(fill = dt_reliability))+
geom_vline(mapping = aes(xintercept = (prior_utilities |> filter(Cost == min(prior_utilities$Cost)))$Cost,
lty = "Expected Cost Without Further DT Verification"), alpha = 1/2) +
geom_vline(mapping = aes(xintercept = preposterior_df$Cost |> mean(),
lty = "Expected Cost With DT Verification"), alpha = 1/2)+
scale_fill_viridis_c()+
labs(y = "Expected Optimal Action", fill = "Verified Reliability of Digital Twin", lty = "")+
scale_x_continuous(name = "Expected Cost, $", limits = c(0, 1.04e5))+
ggthemes::theme_base(base_size = 10)+
theme(legend.position = 'top', legend.title = element_text(size = 8), axis.text.y = element_text(angle = 90, hjust = 0.5),
plot.background = element_rect(colour = NA))+
guides(linetype = guide_legend(nrow = 2),
fill = guide_colorbar(title.position = 'top', barwidth = 10, barheight = 1/2, order = 3))
lhs::randomLHS(n = 10, k = 1)
lhs::randomLHS(n = 10, k = 1) |>
qnorm(mean = 0, sd = 1)
reticulate::repl_python()
