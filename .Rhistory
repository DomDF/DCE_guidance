theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/2)+#, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/2)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_void(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/2, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/2)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_void(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/2, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_void(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/2, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
set.seed(522)
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
set.seed(522)
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "graphopt")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
set.seed(522)
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "graphopt")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
set.seed(522)
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "dendogram")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "treemap")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "linear")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "linear", circular = T)+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "star", circular = T)+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "star")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "circle")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "gem")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "dh")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "graphopt")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "grid")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "grid")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "mds")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "fr")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "kk")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
set.seed(522)
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "kk")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "drl")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "lgl")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
set.seed(522)
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "kk")+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
ggsave(filename = 'component_test_graph.png', device = 'png', width = 6, height = 8, units = 'in', dpi = 'retina')
dep_graph <- ggraph(graph = graph_df |> tidygraph::as_tbl_graph() |> mutate(interactions = tidygraph::centrality_degree(mode = "in")), layout = "linear", circular = T)+
geom_edge_fan(alpha = 1/4, mapping = aes(label = id), family = "Atkinson Hyperlegible", label_alpha = 1/4, check_overlap = T)+
geom_node_text(mapping = aes(label = name), repel = T, size = 3, family = "Atkinson Hyperlegible")+
geom_node_point(mapping = aes(size = interactions), alpha = 1/2)+
theme_graph(base_family = "Atkinson Hyperlegible")+
theme(legend.position = 'top', legend.text = element_text(size = 10, family = "Atkinson Hyperlegible"))
dep_graph
ggsave(filename = 'component_test_graph_2.png', device = 'png', width = 6, height = 8, units = 'in', dpi = 'retina')
graph_df
write_csv(x = graph_df, file = 'graph_df.csv')
ggsave(filename = 'component_test_graph_2.png', device = 'png', width = 8, height = 8, units = 'in', dpi = 'retina')
library(copula); library(tidyverse)
install.packages("copula")
install.packages('pcaPP')
library(pcaPP)
install.packages("copula")
library(copula)
setwd("~/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/DCE_guidance")
n_samples <- 100; clayton_param <- 3; u_mean <- 2; u_sd <- 1; v_mean <- 3; v_sd <- 1
v_params <- DomDF::lnorm_params(norm_mean = v_mean, norm_sd = v_sd)
samples <- copula::claytonCopula(param = clayton_param, dim = 2) |>
copula::mvdc(margins = c('norm', 'lnorm'),
paramMargins = list(list(mean = u_mean, sd = u_sd),
list(meanlog = v_params$meanlog, sdlog = v_params$sdlog))) |>
copula::rMvdc(n = n_samples) |>
as_tibble() |> rename(u = V1, v = V2)
ggplot(data = samples, mapping = aes(x = u, y = v))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(limits = c(-1, 5))+
scale_y_continuous(limits = c(-1, 5))
library(copula); library(tidyverse)
setwd("~/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/DCE_guidance")
n_samples <- 100; clayton_param <- 3; u_mean <- 2; u_sd <- 1; v_mean <- 3; v_sd <- 1
v_params <- DomDF::lnorm_params(norm_mean = v_mean, norm_sd = v_sd)
samples <- copula::claytonCopula(param = clayton_param, dim = 2) |>
copula::mvdc(margins = c('norm', 'lnorm'),
paramMargins = list(list(mean = u_mean, sd = u_sd),
list(meanlog = v_params$meanlog, sdlog = v_params$sdlog))) |>
copula::rMvdc(n = n_samples) |>
as_tibble() |> rename(u = V1, v = V2)
ggplot(data = samples, mapping = aes(x = u, y = v))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(limits = c(-1, 5))+
scale_y_continuous(limits = c(-1, 5))
library(copula); library(tidyverse); library(mvtnorm); library(DomDF)
n_samples <- 20
cov_yield <- 0.07; cov_uts <- 0.04; mean_yield <- 400; mean_uts <- 460
error_y <- 10; error_u <- 10
yield_params <- DomDF::lnorm_params(norm_mean = mean_yield, norm_sd = cov_yield * mean_yield)
y_t_shape_1 <- 30; y_t_shape_2 <- 15
rho_strength <- 0.4
strength_copula <- ellipCopula(family ='normal', param = rho_strength, dim = 2)
strength_mvdc <- copula::mvdc(copula = strength_copula, margins = c('lnorm', 'beta'),
paramMargins = list(list(meanlog = yield_params$meanlog, sdlog = yield_params$sdlog),
list(shape1 = y_t_shape_1, shape2 = y_t_shape_2)))
set.seed(seed = 123456789)
strength_data <- copula::rMvdc(n = n_samples, mvdc = strength_mvdc) |> as_tibble() |>
rename(sigma_y = V1, y_t = V2) |> tibble::rowid_to_column(var = 'id') |>
mutate(sigma_u = sigma_y / y_t) |> select(-c(y_t))
ggplot(data = strength_data)+
geom_point(shape = 1, size = 2, alpha = 3/4, mapping = aes(x = sigma_y, y = sigma_u))+
geom_errorbar(mapping = aes(x = sigma_y, ymin = sigma_u - error_u, ymax = sigma_u + error_u), width = 0, alpha = 1/2)+
geom_errorbarh(mapping = aes(y = sigma_u, xmin = sigma_y - error_y, xmax = sigma_y + error_y), width = 0, alpha = 1/2)+
geom_abline(linetype = 2, alpha = 1/4)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 750))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 750))+
ggthemes::theme_base(base_size = 10, base_family = 'Atkinson Hyperlegible')+
theme(plot.background = element_rect(color = NA))
write_csv(x = strength_data, file = 'srtength_data.csv')
read_csv(file = "https://github.com/DomDF/DCE_guidance/blob/main/strength_data.csv")
read_csv(file = "https://raw.githubusercontent.com/DomDF/DCE_guidance/main/strength_data.csv")
import pandas as pd
reticulate::repl_python()
reticulate::repl_python()
import os, numpy as np
reticulate::repl_python()
reticulate::repl_python()
Sys.Date()
ggplot(data = tibble(x = seq(from = -pi, to = pi)) |> mutate(y = sin(x)), mapping = aes(x, y))+
geom_line()
library(ggplot2)
ggplot(data = tibble(x = seq(from = -pi, to = pi)) |> mutate(y = sin(x)), mapping = aes(x, y))+
geom_line()
library(tidyverse)
ggplot(data = tibble(x = seq(from = -pi, to = pi)) |> mutate(y = sin(x)), mapping = aes(x, y))+
geom_line()
library(tidyverse)
ggplot(data = tibble(x = seq(from = -pi, to = pi, length.out = 1e3)) |> mutate(y = sin(x)), mapping = aes(x, y))+
geom_line()+
ggthemes::theme_base()
library(tidyverse)
ggplot(data = tibble(x = seq(from = -pi, to = pi, length.out = 1e3)) |> mutate(y = sin(x)), mapping = aes(x, y))+
geom_line()+
ggthemes::theme_base(base_size = 12, base_family = "Atkinson Hyperlegible")
install.packages("rmdformats")
install.packages("ggExtra")
install.packages("reticulate")
install.packages("gt")
reticulate::repl_python()
reticulate::repl_python()
#| label: load_R_packages
library(tidyverse); library(cmdstanr)
reticulate::repl_python()
rnorm(n = 10)
reticulate::repl_python()
#| label: load_R_packages
library(tidyverse); library(cmdstanr); library(copula)
reticulate::repl_python()
reticulate::repl_python()
measurements <- strength_df |> dplyr::filter(id <= 15) |> mutate(sigma_u = sigma_y / y_t)
library(copula); library(tidyverse); library(mvtnorm); library(DomDF)
n_samples <- 1003
cov_yield <- 0.07; cov_uts <- 0.04; mean_yield <- 400; mean_uts <- 460
yield_params <- DomDF::lnorm_params(norm_mean = mean_yield, norm_sd = cov_yield * mean_yield)
y_t_shape_1 <- 30; y_t_shape_2 <- 15
rho_strength <- 0.4
strength_copula <- ellipCopula(family ='normal', param = rho_strength, dim = 2)
strength_mvdc <- copula::mvdc(copula = strength_copula, margins = c('lnorm', 'beta'),
paramMargins = list(list(meanlog = yield_params$meanlog, sdlog = yield_params$sdlog),
list(shape1 = y_t_shape_1, shape2 = y_t_shape_2)))
strength_df <- copula::rMvdc(n = n_samples, mvdc = strength_mvdc) |> as_tibble() |>
rename(sigma_y = V1, y_t = V2) |> tibble::rowid_to_column(var = 'id')
measurements <- strength_df |> dplyr::filter(id <= 15) |> mutate(sigma_u = sigma_y / y_t)
gt(data = measurements |> select (id, sigma_y, sigma_u) |>
mutate(dplyr::across(.cols = -c(id), .fns = ~signif(x = .x, digits = 5))) |>
rename ('Test ID' = id, 'Yield Strength, MPa' = sigma_y, 'Ultimate Tensile Strength, MPa' = sigma_u)) |>
tab_header(title = 'Material Test Data') |>
tab_source_note(source_note = 'Simulated Data for Training Purposes')
library(gt)
measurements <- strength_df |> dplyr::filter(id <= 15) |> mutate(sigma_u = sigma_y / y_t)
gt(data = measurements |> select (id, sigma_y, sigma_u) |>
mutate(dplyr::across(.cols = -c(id), .fns = ~signif(x = .x, digits = 5))) |>
rename ('Test ID' = id, 'Yield Strength, MPa' = sigma_y, 'Ultimate Tensile Strength, MPa' = sigma_u)) |>
tab_header(title = 'Material Test Data') |>
tab_source_note(source_note = 'Simulated Data for Training Purposes')
knitr::kable(measurements)
knitr::kable(measurements |> rename('Test ID' = id, 'Yield Strength, MPa' = sigma_y, 'Tensile Strength, MPa' = y_t) |> select(-y_t))
knitr::kable(measurements |> rename('Test ID' = 'id', 'Yield Strength, MPa' = 'sigma_y', 'Tensile Strength, MPa' = 'sigma_u') |> select(-y_t))
gc_plot <- ggplot(data = strength_df, mapping = aes(x = sigma_y, y = y_t))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Yield to Tensile Ratio', limits = c(0,1 ))
gc_plot |> ggExtra::ggMarginal(type = 'histogram')
library(ggExtra)
strength_mv_plot <- ggplot(data = strength_df, mapping = aes(x = sigma_y, y = sigma_y / y_t))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 900))+
geom_abline(lty = 2, alpha = 1/2)+
ggthemes::theme_base(base_size = 12, base_family = 'Atkinson Hyperlegible')+
theme(plot.background = element_rect(color = NA))
strength_mv_plot |> ggExtra::ggMarginal(type = 'histogram')
reticulate::repl_python()
#| label: load_R_packages
library(cmdstanr); library(tidyverse); library(copula)
reticulate::repl_python()
seq(from = 0, to = 1, by = 0.1)
#| label: tab_strength_data
#| tab-cap: "Tensile Test Data of Steel"
measurements <- strength_df |> dplyr::filter(id <= 15) |> mutate(sigma_u = sigma_y / y_t)
knitr::kable(measurements |> rename('Test ID' = 'id', 'Yield Strength, MPa' = 'sigma_y', 'Tensile Strength, MPa' = 'sigma_u') |> select(-y_t))
reticulate::repl_python()
strength_df <- read_csv(file = "https://raw.githubusercontent.com/DomDF/DCE_guidance/main/strength_data.csv")
#| label: fig_strength_data
#| fig-cap: "Plot of Joint Measurements of Yield and Tensile Strength"
strength_mv_plot <- ggplot(data = strength_df, mapping = aes(x = sigma_y, y = sigma_y / y_t))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 900))+
geom_abline(lty = 2, alpha = 1/2)+
ggthemes::theme_base(base_size = 12, base_family = 'Atkinson Hyperlegible')+
theme(plot.background = element_rect(color = NA))
strength_mv_plot |> ggExtra::ggMarginal(type = 'histogram')
strength_df
#| label: fig_strength_data
#| fig-cap: "Plot of Joint Measurements of Yield and Tensile Strength"
strength_mv_plot <- ggplot(data = strength_df, mapping = aes(x = yield, y = tensile))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 900))+
geom_abline(lty = 2, alpha = 1/2)+
ggthemes::theme_base(base_size = 12, base_family = 'Atkinson Hyperlegible')+
theme(plot.background = element_rect(color = NA))
strength_mv_plot |> ggExtra::ggMarginal(type = 'histogram')
#| label: fig_strength_data
#| fig-cap: "Plot of Joint Measurements of Yield and Tensile Strength"
strength_mv_plot <- ggplot(data = strength_df, mapping = aes(x = yield, y = tensile))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 900))+
geom_abline(lty = 2, alpha = 1/2)+
ggthemes::theme_base(base_size = 12, base_family = 'Atkinson Hyperlegible')+
theme(plot.background = element_rect(color = NA))
strength_mv_plot |> ggExtra::ggMarginal(type = 'histogram')
reticulate::repl_python()
strength_df <- read_csv(file = "https://raw.githubusercontent.com/DomDF/DCE_guidance/main/strength_data.csv")
strength_df |> head(n = 3)
reticulate::repl_python()
library(ggExtra)
ggplot(data = measurements, mapping = aes(x = sigma_y, y = sigma_u))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 900))+
geom_abline(lty = 2, alpha = 1/2)
reticulate::repl_python()
#| label: tab_strength_data
#| tab-cap: "Tensile Test Data of Steel"
knitr::kable(strength_df |> rename('Test ID' = 'id', 'Yield Strength, MPa' = 'yield', 'Tensile Strength, MPa' = 'tensile'))
cmdstanr::cmdstan_path()
rstan:::rstudio_stanc("~/Github/KTiEF-windfarm-example/pw-linear/stan/mpPW-linMEM.stan")
rstan:::rstudio_stanc("~/Github/KTiEF-windfarm-example/pw-linear/stan/mpPW-linMEM.stan")
reticulate::repl_python()
reticulate::repl_python()
#| label: load_R_packages
library(cmdstanr); library(tidyverse); library(copula)
reticulate::repl_python()
rnorm(n = 10, mean = 0, sd = 1)
reticulate::repl_python()
strength_df <- read_csv(file = "https://raw.githubusercontent.com/DomDF/DCE_guidance/main/strength_data.csv")
strength_df |> head(n = 3)
#| label: fig_strength_data
#| fig-cap: "Plot of Joint Measurements of Yield and Tensile Strength"
strength_mv_plot <- ggplot(data = strength_df, mapping = aes(x = yield, y = tensile))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 900))+
geom_abline(lty = 2, alpha = 1/2)+
ggthemes::theme_base(base_size = 12, base_family = 'Atkinson Hyperlegible')+
theme(plot.background = element_rect(color = NA))
strength_mv_plot |> ggExtra::ggMarginal(type = 'histogram')
#| label: tab_strength_data
#| tab-cap: "Tensile Test Data of Steel"
knitr::kable(strength_df |> rename('Test ID' = 'id', 'Yield Strength, MPa' = 'yield', 'Tensile Strength, MPa' = 'tensile'))
reticulate::repl_python()
install.packages("fitdistrplus")
fitdistrplus::fitdist(data = strength_df$yield, distr = 'norm')
fitdistrplus::fitdist(data = strength_df$yield, distr = 'norm', method = mle)
fitdistrplus::fitdist(data = strength_df$yield, distr = 'norm', method = 'mle')
fitdistrplus::fitdist(data = strength_df$yield, distr = 'norm', method = 'mme')
fitdistrplus::fitdist(data = strength_df$yield, distr = 'norm', method = 'mle')
install.packages("boot")
reticulate::repl_python()
reticulate::repl_python()
#| label: load_R_packages
library(cmdstanr); library(tidyverse); library(copula);
library(fitdistrplus); library(boot)
reticulate::repl_python()
rnorm(n = 10, mean = 0, sd = 1)
reticulate::repl_python()
#| label: load_R_packages
library(cmdstanr); library(tidyverse)
library(copula); library(fitdistrplus)
library(boot)
reticulate::repl_python()
#| label: load_R_packages
library(tidyverse); library(fitdistrplus)
library(cmdstanr); library(copula); library(boot)
DomDF::prior_pred_app()
reticulate::repl_python()
reticulate::repl_python()
#| label: load_R_packages
library(tidyverse); library(fitdistrplus)
library(cmdstanr); library(copula); library(boot)
reticulate::repl_python()
rnorm(n = 10, mean = 0, sd = 1)
reticulate::repl_python()
strength_df <- read_csv(file = "https://raw.githubusercontent.com/DomDF/DCE_guidance/main/data_files/strength_data.csv")
strength_df |> head(n = 3)
#| label: fig_strength_data
#| fig-cap: "Plot of Joint Measurements of Yield and Tensile Strength"
strength_mv_plot <- ggplot(data = strength_df, mapping = aes(x = yield, y = tensile))+
geom_point(shape = 1, alpha = 1/2)+
scale_x_continuous(name = 'Yield Strength, MPa', limits = c(300, 600))+
scale_y_continuous(name = 'Ultimate Tensile Strength, MPa', limits = c(300, 900))+
geom_abline(lty = 2, alpha = 1/2)+
ggthemes::theme_base(base_size = 12, base_family = 'Atkinson Hyperlegible')+
theme(plot.background = element_rect(color = NA))
strength_mv_plot |> ggExtra::ggMarginal(type = 'histogram')
#| label: tab_strength_data
#| tab-cap: "Tensile Test Data of Steel"
strength_df |> rename('Test ID' = 'id', 'Yield Strength, MPa' = 'yield', 'Tensile Strength, MPa' = 'tensile') |> knitr::kable()
reticulate::repl_python()
fitdist(data = strength_df$yield, distr = 'norm', method = 'mle')
est_norm_mean <- function(x, id) {fitdist(x[id], distr = 'norm')$estimate[1]}
bootstrap_est <- strength_df$yield |>
boot(statistic = est_norm_mean, R = 1e3) |>
boot.ci(conf = 0.95)
bootstrap_est$normal |> as_tibble() |>
rename(lower_bound = V2, upper_bound = V3)
reticulate::repl_python()
strength_model <- url("https://raw.githubusercontent.com/DomDF/DCE_guidance/main/stan_models/yield_strength_model.stan") |>
readLines() |>
cmdstanr::write_stan_file() |>
cmdstanr::cmdstan_model()
reticulate::repl_python()
reticulate::repl_python()
#| label: load_R_packages
library(tidyverse); library(fitdistrplus)
library(cmdstanr); library(copula); library(boot)
strength_model <- url("https://raw.githubusercontent.com/DomDF/DCE_guidance/main/stan_models/yield_strength_model.stan") |>
readLines() |>
cmdstanr::write_stan_file() |>
cmdstanr::cmdstan_model()
strength_model <- url("https://raw.githubusercontent.com/DomDF/DCE_guidance/main/stan_models/yield_strength_model.stan") |>
readLines() |>
cmdstanr::write_stan_file() |>
cmdstanr::cmdstan_model()
reticulate::repl_python()
